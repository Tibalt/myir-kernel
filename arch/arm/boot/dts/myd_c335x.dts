/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	model = "MYIR MYD C335x";
	compatible = "ti,myd_c335x", "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&vdd_core>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
		regulator-always-on;
	};
	
	vdd_3v3: fixedregulator@1{
		compatible = "regulator-fixed";
		regulator-name = "vdd_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		vin-supply = <&vbat>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_1v8: fixedregulator@2{
		compatible = "regulator-fixed";
		regulator-name = "vdd_1v8";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		vin-supply = <&vdd_3v3>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_core: fixedregulator@4{
		compatible = "regulator-fixed";
		regulator-name = "vdd_core";
		vin-supply = <&vdd_3v3>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_mpu: fixedregulator@5{
		compatible = "regulator-fixed";
		regulator-name = "vdd_mpu";
		vin-supply = <&vdd_3v3>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_adc: fixedregulator@6{
		compatible = "regulator-fixed";
		regulator-name = "vdd_adc";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		vin-supply = <&vdd_1v8>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_rtc: fixedregulator@7{
		compatible = "regulator-fixed";
		regulator-name = "vdd_rtc";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		vin-supply = <&vdd_1v8>;
		regulator-boot-on;
		regulator-always-on;
		};


	gpio-leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&leds_pins>;

		D3 {
			label = "myc:green:user1";
			gpios = <&gpio3 18 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "cpu0";
			default-state = "off";
		};

		D40 {
			label = "myd:green:user3";
			gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "timer";
			default-state = "off";
		};
	};
	
        watchdog: watchdog {
            /* CAT823T */
            compatible = "linux,wdt-gpio";
            pinctrl-names = "default";
            pinctrl-0 = <&watchdog_pins>;
            gpios = <&gpio3 19 GPIO_ACTIVE_LOW>;
            hw_algo = "toggle";
            always-running;
            hw_margin_ms = <1000>;
       };
	
};

&am33xx_pinmux {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&acpwr_down_pins_default>;
	pinctrl-1 = <&acpwr_down_pins_sleep>;
    acpwr_down_pins_default: acpwr_down_pins_default {
        pinctrl-single,pins = <
            0x3c ( PIN_INPUT | MUX_MODE7 ) /* (U13) gpmc_ad15.gpio1[15] */
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    acpwr_down_pins_sleep: acpwr_down_pins_sleep {
        pinctrl-single,pins = <
            0x3c (  PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (U13) gpmc_ad15.gpio1[15] */
        >;         
    };             
   
	leds_pins: pinmux_leds_pins {
		pinctrl-single,pins = <
			0x28 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (T11) gpmc_ad10.gpio0[26] */
			0x1A0 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	nandflash_pins_default: nandflash_pins_default {
		pinctrl-single,pins = <
			0x0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
			0x4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
			0x8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
			0xc (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
			0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
			0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
			0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
			0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
			0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
			0x74 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpio0_30 */
			0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0  */
			0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
			0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
			0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
			0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_be0n_cle.gpmc_be0n_cle */
		>;
	};

	nandflash_pins_sleep: nandflash_pins_sleep {
		pinctrl-single,pins = <
			0x0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0xc (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x7c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x90 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x94 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x98 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x9c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};


	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txen.rgmii1_tctl */
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxdv.rgmii1_rctl */
			0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd3.rgmii1_td3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd2.rgmii1_td2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd1.rgmii1_td1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd0.rgmii1_td0 */
			0x12c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txclk.rgmii1_tclk */
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxclk.rgmii1_rclk */
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd3.rgmii1_rd3 */
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd2.rgmii1_rd2 */
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd1.rgmii1_rd1 */
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd0.rgmii1_rd0 */
		/* Slave 2 */
	 		0x40  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN)  /* gpmc_a0.rgmii2_tctl */
			0x44  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a1.rgmii2_rctl */
			0x48  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a2.rgmii2_td3 */
			0x4c  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a3.rgmii2_td2 */
			0x50  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a4.rgmii2_td1 */
			0x54  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a5.rgmii2_td0 */
			0x58  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a6.rgmii2_tclk */
			0x5c  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a7.rgmii2_rclk */
			0x60  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a8.rgmii2_rd3 */
			0x64  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a9.rgmii2_rd2 */
			0x68  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a10.rgmii2_rd1 */
			0x6c  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a11.rgmii2_rd0 */
            		0x30 ( PIN_INPUT | MUX_MODE7 ) /* (T12) gpmc_ad12.gpio1[12] */  // eth1_int
            0xe4 ( PIN_OUTPUT | MUX_MODE7 ) /* (R5) lcd_hsync.gpio2[23] */ // rst AR8035 phy
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		/* Slave 2 reset value */
	 		0x40  (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* gpmc_a0.rgmii2_tctl */
			0x44  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a1.rgmii2_rctl */
			0x48  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a2.rgmii2_td3 */
			0x4c  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a3.rgmii2_td2 */
			0x50  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a4.rgmii2_td1 */
			0x54  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a5.rgmii2_td0 */
			0x58  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a6.rgmii2_tclk */
			0x5c  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a7.rgmii2_rclk */
			0x60  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a8.rgmii2_rd3 */
			0x64  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a9.rgmii2_rd2 */
			0x68  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a10.rgmii2_rd1 */
			0x6c  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a11.rgmii2_rd0 */
            		0x30 (  PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (T12) gpmc_ad12.gpio1[12] */
            0xe4 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (R5) lcd_hsync.gpio2[23] */ // rst AR8035 phy
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

    relayout_func_gpio2_pins_default: relayout_func_gpio2_pins_default {
        pinctrl-single,pins = <
//            0x88 ( PIN_INPUT | MUX_MODE7 ) /* (T13) gpmc_csn3.gpio2[0] */
//            0x8c ( PIN_INPUT | MUX_MODE7 ) /* (V12) gpmc_clk.gpio2[1] */
            0xa0 ( PIN_OUTPUT | MUX_MODE7 ) /* (R1) lcd_data0.gpio2[6] */
            0xa4 ( PIN_OUTPUT | MUX_MODE7 ) /* (R2) lcd_data1.gpio2[7] */
            0xa8 ( PIN_OUTPUT | MUX_MODE7 ) /* (R3) lcd_data2.gpio2[8] */
            0xac ( PIN_OUTPUT | MUX_MODE7 ) /* (R4) lcd_data3.gpio2[9] */
            0xb0 ( PIN_OUTPUT | MUX_MODE7 ) /* (T1) lcd_data4.gpio2[10] */
            0xb4 ( PIN_OUTPUT | MUX_MODE7 ) /* (T2) lcd_data5.gpio2[11] */
            0xb8 ( PIN_OUTPUT | MUX_MODE7 ) /* (T3) lcd_data6.gpio2[12] */
            0xbc ( PIN_OUTPUT | MUX_MODE7 ) /* (T4) lcd_data7.gpio2[13] */
            0xc0 ( PIN_OUTPUT | MUX_MODE7 ) /* (U1) lcd_data8.gpio2[14] */
            0xc4 ( PIN_OUTPUT | MUX_MODE7 ) /* (U2) lcd_data9.gpio2[15] */
//            0xe0 ( PIN_OUTPUT | MUX_MODE7 ) /* (U5) lcd_vsync.gpio2[22] */
//            0xe4 ( PIN_OUTPUT | MUX_MODE7 ) /* (R5) lcd_hsync.gpio2[23] */
//            0xec ( PIN_INPUT | MUX_MODE7 ) /* (R6) lcd_ac_bias_en.gpio2[25] */
        >;
    };

                
//    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
//    gpio3_pins_sleep: gpio3_pins_sleep {
//        pinctrl-single,pins = <
//            0x234 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (F15) USB1_DRVVBUS.gpio3[13] */  // iic_uart_int
//            0x1a8 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D13) mcasp0_axr1.gpio3[20] */   // esam_pwr
//       >;
//    };

        watchdog_pins: pinmux_watchdog_pins{
            pinctrl-single,pins = <0x1a4 ( PIN_INPUT | MUX_MODE7 ) /* (C13) mcasp0_fsr.gpio3[19] */>;
        };
    
    uart_gpio_i2c0_pins_default: uart_gpio_i2c0_pins_default {
        pinctrl-single,pins = <
            0x18c ( PIN_INPUT | MUX_MODE0 ) /* (C16) I2C0_SCL.I2C0_SCL */
            0x188 ( PIN_INPUT | MUX_MODE0 ) /* (C17) I2C0_SDA.I2C0_SDA */
            0x234 ( PIN_INPUT| MUX_MODE7 ) /* (F15) USB1_DRVVBUS.gpio3[13] */  // iic_uart_int
            0x21c ( PIN_OUTPUT | MUX_MODE7 ) /* (F16) USB0_DRVVBUS.gpio0[18] */ //iic_uart_rst
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    uart_gpio_i2c0_pins_sleep: uart_gpio_i2c0_pins_sleep {
        pinctrl-single,pins = <
            0x18c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (C16) I2C0_SCL.I2C0_SCL */
            0x188 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (C17) I2C0_SDA.I2C0_SDA */
            0x234 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (F15) USB1_DRVVBUS.gpio3[13] */  // iic_uart_int
            0x21c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (F16) USB0_DRVVBUS.gpio0[18] */ //iic_uart_rst
        >;
    };
    
    e2proom_rtc_i2c2_pins_default: e2proom_rtc_i2c2_pins_default {
        pinctrl-single,pins = <
            0x17c ( PIN_INPUT | MUX_MODE3 ) /* (D17) uart1_rtsn.I2C2_SCL */
            0x178 ( PIN_INPUT | MUX_MODE3 ) /* (D18) uart1_ctsn.I2C2_SDA */
            0xdc ( PIN_OUTPUT | MUX_MODE7 ) /* (T5) lcd_data15.gpio0[11] */ //write protection
            0xec ( PIN_INPUT | MUX_MODE7 ) /* (R6) lcd_ac_bias_en.gpio2[25] */   //8025 pps 
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    e2proom_rtc_i2c2_pins_sleep: e2proom_rtc_i2c2_pins_sleep {
        pinctrl-single,pins = <
            0x17c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D17) uart1_rtsn.I2C2_SCL */
            0x178 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D18) uart1_ctsn.I2C2_SDA */
            0xdc ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (T5) lcd_data15.gpio0[11] */ //e2prom write protection
            0xec ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (R6) lcd_ac_bias_en.gpio2[25] */   //8025 pps 
        >;
    };
    
    eth1_mdio1_pins_default: eth1_mdio1_pins_default {
        pinctrl-single,pins = <
            0x14c ( PIN_OUTPUT | MUX_MODE0 ) /* (M18) mdio_clk.mdio_clk */
            0x148 ( PIN_INPUT | MUX_MODE0 ) /* (M17) mdio_data.mdio_data */
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    eth1_mdio1_pins_sleep: eth1_mdio1_pins_sleep {
        pinctrl-single,pins = <
            0x14c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (M18) mdio_clk.mdio_clk */
            0x148 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (M17) mdio_data.mdio_data */
        >;
    };
    
    di_pruss_pins_default: di_pruss_pins_default {
        pinctrl-single,pins = <
            0x1ac ( PIN_INPUT | MUX_MODE6 ) /* (A14) mcasp0_ahclkx.pr1_pru0_pru_r30[7] */
            0xf0 ( PIN_INPUT | MUX_MODE6 ) /* (F17) mmc0_dat3.pr1_pru0_pru_r30[8] */
            0xf4 ( PIN_INPUT | MUX_MODE6 ) /* (F18) mmc0_dat2.pr1_pru0_pru_r30[9] */
            0xf8 ( PIN_INPUT | MUX_MODE6 ) /* (G15) mmc0_dat1.pr1_pru0_pru_r31[10] */
            0xfc ( PIN_INPUT | MUX_MODE6 ) /* (G16) mmc0_dat0.pr1_pru0_pru_r31[11] */
            0x100 ( PIN_INPUT | MUX_MODE6 ) /* (G17) mmc0_clk.pr1_pru0_pru_r31[12] */
            0x104 ( PIN_INPUT | MUX_MODE6 ) /* (G18) mmc0_cmd.pr1_pru0_pru_r31[13] */
            0x38 ( PIN_INPUT | MUX_MODE6 ) /* (V13) gpmc_ad14.pr1_pru0_pru_r31[14] */
            0xe0 ( PIN_OUTPUT | MUX_MODE7 ) /* (U5) lcd_vsync.gpio2[22]  high tf or low gpio*/ 
        >;
    };
    
    jiaocai_spi_pins_default: jiaocai_spi_pins_default {
        pinctrl-single,pins = <
            0x150 ( PIN_INPUT | MUX_MODE0 ) /* (A17) spi0_sclk.spi0_sclk */
            0x154 ( PIN_INPUT | MUX_MODE0 ) /* (B17) spi0_d0.spi0_d0 */
            0x158 ( PIN_INPUT | MUX_MODE0 ) /* (B16) spi0_d1.spi0_d1 */
            0x15c ( PIN_INPUT | MUX_MODE0 ) /* (A16) spi0_cs0.spi0_cs0 */
            0x88 ( PIN_INPUT | MUX_MODE7 ) /* (T13) gpmc_csn3.gpio2[0] */
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    jiaocai_spi_pins_sleep: jiaocai_spi_pins_sleep {
        pinctrl-single,pins = <
            0x150 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (A17) spi0_sclk.spi0_sclk */
            0x154 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (B17) spi0_d0.spi0_d0 */
            0x158 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (B16) spi0_d1.spi0_d1 */
            0x15c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (A16) spi0_cs0.spi0_cs0 */
        >;
    };
    
    encrypt_spi1_pins_default: encrypt_spi1_pins_default {
        pinctrl-single,pins = <
            0x190 ( PIN_INPUT | MUX_MODE3 ) /* (A13) mcasp0_aclkx.spi1_sclk */
            0x194 ( PIN_INPUT | MUX_MODE3 ) /* (B13) mcasp0_fsx.spi1_d0 */
            0x198 ( PIN_INPUT | MUX_MODE3 ) /* (D12) mcasp0_axr0.spi1_d1 */
            0x19c ( PIN_INPUT | MUX_MODE3 ) /* (C12) mcasp0_ahclkr.spi1_cs0 */
            0x1a8 ( PIN_OUTPUT | MUX_MODE7 ) /* (D13) mcasp0_axr1.gpio3[20] */ //power

        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    encrypt_spi1_pins_sleep: encrypt_spi1_pins_sleep {
        pinctrl-single,pins = <
            0x190 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (A13) mcasp0_aclkx.spi1_sclk */
            0x194 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (B13) mcasp0_fsx.spi1_d0 */
            0x198 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D12) mcasp0_axr0.spi1_d1 */
            0x19c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (C12) mcasp0_ahclkr.spi1_cs0 */
            0x1a8 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D13) mcasp0_axr1.gpio3[20] */ //power
        >;
    };
    
    g_uart5_pins_default: g_uart5_pins_default {
        pinctrl-single,pins = <
            0x108 ( PIN_INPUT | MUX_MODE3 ) /* (H16) gmii1_col.uart5_rxd */
            0x144 ( PIN_OUTPUT | MUX_MODE3 ) /* (H18) rmii1_refclk.uart5_txd */
            0xd0 ( PIN_OUTPUT | MUX_MODE7 ) /* (V2) lcd_data12.gpio0[8] */ //rst
            0xd4 ( PIN_OUTPUT | MUX_MODE7 ) /* (V3) lcd_data13.gpio0[9] */ //power on
            0xd8 ( PIN_OUTPUT | MUX_MODE7 ) /* (V4) lcd_data14.gpio0[10] */ //wake up
            0xc8 ( PIN_OUTPUT | MUX_MODE7 ) /* (U3) lcd_data10.gpio2[16] */ //heat
            0xcc ( PIN_OUTPUT | MUX_MODE7 ) /* (U4) lcd_data11.gpio2[17] */	//power enable 
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    g_uart5_pins_sleep: g_uart5_pins_sleep {
        pinctrl-single,pins = <
            0x108 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (H16) gmii1_col.uart5_rxd */
            0x144 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (H18) rmii1_refclk.uart5_txd */
            0xd0 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (V2) lcd_data12.gpio0[8] */
            0xd4 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (V3) lcd_data13.gpio0[9] */
            0xd8 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (V4) lcd_data14.gpio0[10] */
            0xc8 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (U3) lcd_data10.gpio2[16] */
            0xcc ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (U4) lcd_data11.gpio2[17] */	  	    
        >;
    };
    
    wifi_uart4_pins_default: wifi_uart4_pins_default {
        pinctrl-single,pins = <
            0x168 ( PIN_INPUT | MUX_MODE1 ) /* (E18) uart0_ctsn.uart4_rxd */
            0x16c ( PIN_OUTPUT | MUX_MODE1 ) /* (E17) uart0_rtsn.uart4_txd */
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    wifi_uart4_pins_sleep: wifi_uart4_pins_sleep {
        pinctrl-single,pins = <
            0x168 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (E18) uart0_ctsn.uart4_rxd */
            0x16c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (E17) uart0_rtsn.uart4_txd */
        >;
    };
    
    rf_uart1_pins_default: rf_uart1_pins_default {
        pinctrl-single,pins = <
            0x180 ( PIN_INPUT | MUX_MODE0 ) /* (D16) uart1_rxd.uart1_rxd */
            0x184 ( PIN_OUTPUT | MUX_MODE0 ) /* (D15) uart1_txd.uart1_txd */
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    rf_uart1_pins_sleep: rf_uart1_pins_sleep {
        pinctrl-single,pins = <
            0x180 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D16) uart1_rxd.uart1_rxd */
            0x184 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (D15) uart1_txd.uart1_txd */
        >;
    };
    
    plc_uart2_pins_default: plc_uart2_pins_default {
        pinctrl-single,pins = <
            0x10c ( PIN_INPUT | MUX_MODE6 ) /* (H17) gmii1_crs.uart2_rxd */
            0x110 ( PIN_OUTPUT | MUX_MODE6 ) /* (J15) gmii1_rxer.uart2_txd */
            0x8c ( PIN_INPUT | MUX_MODE7 ) /* (V12) gpmc_clk.gpio2[1] */  //PLC state
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    plc_uart2_pins_sleep: plc_uart2_pins_sleep {
        pinctrl-single,pins = <
            0x10c ( PIN_INPUT_PULLDOWN | MUX_MODE7) /* (H17) gmii1_crs.uart2_rxd */
            0x110 ( PIN_INPUT_PULLDOWN | MUX_MODE7) /* (J15) gmii1_rxer.uart2_txd */
            0x8c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (V12) gpmc_clk.gpio2[1] */
        >;
    };
    
    debug_uart0_pins_default: debug_uart0_pins_default {
        pinctrl-single,pins = <
            0x170 ( PIN_INPUT | MUX_MODE0 ) /* (E15) uart0_rxd.uart0_rxd */
            0x174 ( PIN_OUTPUT | MUX_MODE0 ) /* (E16) uart0_txd.uart0_txd */
        >;
    };
    
   
    rs232_485_uart3_pins_default: rs232_485_uart3_pins_default {
        pinctrl-single,pins = <
            0x160 ( PIN_INPUT | MUX_MODE1 ) /* (C15) spi0_cs1.uart3_rxd */
            0x164 ( PIN_OUTPUT | MUX_MODE1 ) /* (C18) eCAP0_in_PWM0_out.uart3_txd */
        >;
    };
    
    /* Optional sleep pin settings. Must manually enter values in the below skeleton. */
    rs232_485_uart3_pins_sleep: rs232_485_uart3_pins_sleep {
        pinctrl-single,pins = <
            0x160 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (C15) spi0_cs1.uart3_rxd */
            0x164 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (C18) eCAP0_in_PWM0_out.uart3_txd */
        >;
    };

};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&debug_uart0_pins_default>;

	status = "okay";
};

&uart1 {

	pinctrl-names = "default";
	pinctrl-0 = <&rf_uart1_pins_default>;
	status = "okay";
};

&uart2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&plc_uart2_pins_default>;
	pinctrl-1 = <&plc_uart2_pins_sleep>;
	status = "okay";
};

&uart3 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&rs232_485_uart3_pins_default>;
	pinctrl-1 = <&rs232_485_uart3_pins_sleep>;
	status = "okay";
};

&uart4 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&wifi_uart4_pins_default>;
	pinctrl-1 = <&wifi_uart4_pins_sleep>;
	status = "okay";
};

&uart5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&g_uart5_pins_default>;
	pinctrl-1 = <&g_uart5_pins_sleep>;
	status = "okay";
};

&pruss {
	pinctrl-names = "default"; 
	pinctrl-0 = <&di_pruss_pins_default>;
	status = "okay";
};


&i2c0 {
	pinctrl-names = "default","sleep";
	pinctrl-0 = <&uart_gpio_i2c0_pins_default>;
	pinctrl-1 = <&uart_gpio_i2c0_pins_sleep>;

	status = "okay";
	clock-frequency = <400000>;

	gpio@20 {
		compatible = "ti,tca9554";
		reg = <0x20>;
		gpio-controller;
		#gpio-cells = <2>;
	};
	
	gpio@21 {
		compatible = "ti,tca9554";
		reg = <0x21>;
		gpio-controller;
		#gpio-cells = <2>;
	};
};

&i2c2 {
	pinctrl-names = "default","sleep";
	pinctrl-0 = <&e2proom_rtc_i2c2_pins_default>;
	pinctrl-1 = <&e2proom_rtc_i2c2_pins_sleep>;

	status = "okay";
	clock-frequency = <400000>;

         rx8025: rx8025@32 {
         	compatible = "epson,rx8025t";
            	reg = <0x32>;
        };
	
// TODO: add e2prom
	
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
    	dr_mode = "host";
	status = "okay";
};

&usb1_phy {
    	dr_mode = "host";
	status = "okay";
};

&usb0 {
    	dr_mode = "host";
	status = "okay";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&spi0{
    	status = "okay";
        pinctrl-names = "default","sleep";
        pinctrl-0 = <&jiaocai_spi_pins_default>;
        pinctrl-1 = <&jiaocai_spi_pins_sleep>;
        ti,pindir-d0-in-d1-out =<1>;
        spi@0 {
                compatible = "rohm,dh2228fv";
                spi-max-frequency = <48000000>;
                reg = <0x0>;
        };
};

&spi1{

    status = "okay";
        pinctrl-names = "default","sleep";
        pinctrl-0 = <&encrypt_spi1_pins_default>;
        pinctrl-1 = <&encrypt_spi1_pins_sleep>;
        ti,pindir-d0-in-d1-out =<1>;
        spi@0 {
                compatible = "rohm,dh2228fv";
                spi-max-frequency = <48000000>;
                reg = <0x0>;
        };

};


&elm {
	status = "okay";
};


&gpmc {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&nandflash_pins_default>;
	pinctrl-1 = <&nandflash_pins_sleep>;
	ranges = <0 0 0x08000000 0x1000000>;	/* CS0: 16MB for NAND */
	nand@0,0 {
		compatible = "ti,omap2-nand";
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		interrupt-parent = <&intc>;
		interrupts = <100>;
		ready-gpio = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
		ti,nand-ecc-opt = "bch8";
		ti,elm-id = <&elm>;
		nand-bus-width = <8>;
		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;
		/* MTD partition table */
		/* All SPL-* partitions are sized to minimal length
		 * which can be independently programmable. For
		 * NAND flash this is equal to size of erase-block */
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0 {
			label = "NAND.SPL";
			reg = <0x00000000 0x000020000>;
		};
		partition@1 {
			label = "NAND.SPL.backup1";
			reg = <0x00020000 0x00020000>;
		};
		partition@2 {
			label = "NAND.SPL.backup2";
			reg = <0x00040000 0x00020000>;
		};
		partition@3 {
			label = "NAND.SPL.backup3";
			reg = <0x00060000 0x00020000>;
		};
		partition@4 {
			label = "NAND.u-boot-spl-os";
			reg = <0x00080000 0x00040000>;
		};
		partition@5 {
			label = "NAND.u-boot";
			reg = <0x000C0000 0x00100000>;
		};
		partition@6 {
			label = "NAND.u-boot-env";
			reg = <0x001C0000 0x00020000>;
		};
		partition@7 {
			label = "NAND.u-boot-env.backup1";
			reg = <0x001E0000 0x00020000>;
		};
		partition@8 {
			label = "NAND.kernel";
			reg = <0x00200000 0x00800000>;
		};
		partition@9 {
			label = "NAND.rootfs";
			reg = <0x00A00000 0x07600000>;
		};
		partition@10 {
			label = "NAND.userdata";
			reg = <0x08000000 0x08000000>;
		};		
	};
};


&mac {
	slaves = <2>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	dual_emac = <1>;
//	active_slave = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <4>;
	phy-mode = "rgmii-txid";
//	dual_emac_res_vlan=<0>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <6>;
	phy-mode = "rgmii-txid";
//	dual_emac_res_vlan=<1>;
};

&tscadc {
	status = "okay";
	adc {
		ti,adc-channels = <0 1 2 3 4 5>;
	};
};

&sham {
	status = "okay";
};

&aes {
	status = "okay";
};


&wkup_m3_ipc {
	ti,scale-data-fw = "am335x-evm-scale-data.bin";
};

//&rtc {
//	system-power-controller;
//};

&sgx {
	status = "disabled";
};
